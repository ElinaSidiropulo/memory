package com.example.memorytrainer.activities

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import android.graphics.Color
import androidx.appcompat.app.AppCompatActivity
import com.example.memorytrainer.R
import kotlin.random.Random


class RepeatSequenceActivity : AppCompatActivity() {

    private lateinit var sequenceText: TextView
    private lateinit var buttonContainer: LinearLayout

    private val sequence = mutableListOf<String>()
    private val userInput = mutableListOf<String>()
    private val handler = Handler(Looper.getMainLooper())

    private val buttonCount = 4
    private var isInputEnabled = false  // üîí –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_repeat_sequence)

        sequenceText = findViewById(R.id.sequenceText)
        buttonContainer = findViewById(R.id.buttonContainer)

        generateButtons()
        startNewRound()
    }

    private fun generateButtons() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–º–∞–π–ª–∏–∫–∏ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")

        for (i in 0 until buttonCount) {
            val button = Button(this).apply {
                text = emojis[i]  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–º–∞–π–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ
                textSize = 20f
                setOnClickListener {
                    if (isInputEnabled) onUserClick(emojis[i])
                }
            }
            buttonContainer.addView(button)
        }
    }

    private fun startNewRound() {
        isInputEnabled = false  // üîí –ü–æ–∫–∞ –Ω–µ–ª—å–∑—è –Ω–∞–∂–∏–º–∞—Ç—å
        userInput.clear()
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")
        sequence.add(emojis.random())  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å

        sequenceText.text = "–ó–∞–ø–æ–º–∏–Ω–∞–π..."
        showSequence()
    }

    private fun onUserClick(selectedEmoji: String) {
        userInput.add(selectedEmoji)

        val currentIndex = userInput.lastIndex
        if (currentIndex >= sequence.size || userInput[currentIndex] != sequence[currentIndex]) {
            Toast.makeText(this, "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", Toast.LENGTH_SHORT).show()
            sequence.clear()
            handler.postDelayed({ startNewRound() }, 1000)
            return
        }

        if (userInput.size == sequence.size) {
            Toast.makeText(this, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", Toast.LENGTH_SHORT).show()
            isInputEnabled = false
            handler.postDelayed({ startNewRound() }, 1000)
        }
    }

    private fun showSequence() {
        val colors = listOf(Color.BLACK, Color.BLUE)  // –¶–≤–µ—Ç–∞ –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è
        var delay = 0L

        for ((index, emoji) in sequence.withIndex()) {
            handler.postDelayed({
                sequenceText.setTextColor(colors[index % colors.size]) // –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç
                sequenceText.text = emoji  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–º–∞–π–ª–∏–∫ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            }, delay)
            delay += 1000L
        }

        handler.postDelayed({
            sequenceText.setTextColor(Color.DKGRAY)  // –≤–µ—Ä–Ω—ë–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
            sequenceText.text = "–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!"
            isInputEnabled = true
        }, delay)
    }

}
