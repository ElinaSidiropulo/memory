package com.example.memorytrainer.activities

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.Menu
import android.view.MenuItem
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import com.example.memorytrainer.R
import com.example.memorytrainer.utils.ThemeManager
import com.example.memorytrainer.utils.UserManager
import android.graphics.Color

class RepeatSequenceActivity : AppCompatActivity() {

    private lateinit var sequenceText: TextView
    private lateinit var buttonContainer: LinearLayout
    private lateinit var userManager: UserManager

    private val sequence = mutableListOf<String>()
    private val userInput = mutableListOf<String>()
    private val handler = Handler(Looper.getMainLooper())

    private val buttonCount = 4
    private var isInputEnabled = false

    private var currentLength = 1 // —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private var repeatCount = 0   // —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –¥–ª–∏–Ω—É
    private val maxLength = 10    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    override fun onCreate(savedInstanceState: Bundle?) {
        ThemeManager.applyTheme(this)
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_repeat_sequence)

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UserManager
        userManager = UserManager(this)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ActionBar
        supportActionBar?.apply {
            setDisplayHomeAsUpEnabled(false)
            title = userManager.getCurrentUsername() ?: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!userManager.isLoggedIn()) {
            startActivity(Intent(this, AuthActivity::class.java))
            finish()
            return
        }

        sequenceText = findViewById(R.id.sequenceText)
        buttonContainer = findViewById(R.id.buttonContainer)

        generateButtons()
        startNewRound()
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.main_menu, menu)
        return true
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.menu_about -> {
                AlertDialog.Builder(this)
                    .setTitle("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
                    .setMessage("Memory Trainer ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–∞–º—è—Ç–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
                    .setPositiveButton("OK", null)
                    .show()
                true
            }
            R.id.menu_theme_light -> {
                ThemeManager.setThemeMode(this, ThemeManager.ThemeMode.LIGHT)
                true
            }
            R.id.menu_theme_dark -> {
                ThemeManager.setThemeMode(this, ThemeManager.ThemeMode.DARK)
                true
            }
            R.id.menu_logout -> {
                userManager.logoutUser()
                val intent = Intent(this, AuthActivity::class.java)
                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                startActivity(intent)
                finish()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun generateButtons() {
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")
        for (i in 0 until buttonCount) {
            val button = Button(this).apply {
                text = emojis[i]
                textSize = 20f
                setOnClickListener {
                    if (isInputEnabled) onUserClick(emojis[i])
                }
            }
            buttonContainer.addView(button)
        }
    }

    private fun startNewRound() {
        isInputEnabled = false
        userInput.clear()
        sequence.clear()

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")
        repeat(currentLength) {
            sequence.add(emojis.random())
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞—É–Ω–¥–æ–º –∏–∑ 3 –ø–æ–ø—ã—Ç–æ–∫
        if (repeatCount == 0) {
            Toast.makeText(this, "–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: $currentLength", Toast.LENGTH_SHORT).show()
        }

        sequenceText.text = "–ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ..."
        showSequence()
    }

    private fun onUserClick(selectedEmoji: String) {
        userInput.add(selectedEmoji)
        val currentIndex = userInput.lastIndex

        if (currentIndex >= sequence.size || userInput[currentIndex] != sequence[currentIndex]) {
            Toast.makeText(this, "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", Toast.LENGTH_SHORT).show()
            repeatCount = 0 // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–π –¥–ª–∏–Ω–µ
            handler.postDelayed({ startNewRound() }, 1000)
            return
        }

        if (userInput.size == sequence.size) {
            Toast.makeText(this, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", Toast.LENGTH_SHORT).show()
            isInputEnabled = false
            repeatCount++

            if (repeatCount == 3) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–ª–∏–Ω–µ
                currentLength++
                repeatCount = 0

                if (currentLength > maxLength) {
                    // –ü–æ–±–µ–¥–∞!
                    Toast.makeText(this, "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!", Toast.LENGTH_LONG).show()
                    handler.postDelayed({
                        currentLength = 1
                        repeatCount = 0
                        startNewRound()
                    }, 2000)
                    return
                }
            }

            handler.postDelayed({ startNewRound() }, 1000)
        }
    }

    private fun showSequence() {
        val colors = listOf(Color.BLACK, Color.BLUE)
        var delay = 0L

        for ((index, emoji) in sequence.withIndex()) {
            handler.postDelayed({
                sequenceText.setTextColor(colors[index % colors.size])
                sequenceText.text = "${index + 1}: $emoji" // üëà –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä
            }, delay)
            delay += 1200L
        }

        handler.postDelayed({
            sequenceText.setTextColor(Color.DKGRAY)
            sequenceText.text = "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!"
            isInputEnabled = true
        }, delay)
    }
}