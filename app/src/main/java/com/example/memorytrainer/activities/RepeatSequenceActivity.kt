package com.example.memorytrainer.activities

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import android.graphics.Color
import androidx.appcompat.app.AppCompatActivity
import com.example.memorytrainer.R
import kotlin.random.Random

class RepeatSequenceActivity : AppCompatActivity() {

    private lateinit var sequenceText: TextView
    private lateinit var buttonContainer: LinearLayout

    private val sequence = mutableListOf<String>()
    private val userInput = mutableListOf<String>()
    private val handler = Handler(Looper.getMainLooper())

    private val buttonCount = 4
    private var isInputEnabled = false

    private var currentLength = 1 // —Ç–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private var repeatCount = 0   // —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –¥–ª–∏–Ω—É
    private val maxLength = 10    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_repeat_sequence)

        sequenceText = findViewById(R.id.sequenceText)
        buttonContainer = findViewById(R.id.buttonContainer)

        generateButtons()
        startNewRound()
    }

    private fun generateButtons() {
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")
        for (i in 0 until buttonCount) {
            val button = Button(this).apply {
                text = emojis[i]
                textSize = 20f
                setOnClickListener {
                    if (isInputEnabled) onUserClick(emojis[i])
                }
            }
            buttonContainer.addView(button)
        }
    }

    private fun startNewRound() {
        isInputEnabled = false
        userInput.clear()
        sequence.clear()

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        val emojis = listOf("üòä", "üòé", "üòú", "ü§©")
        repeat(currentLength) {
            sequence.add(emojis.random())
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞—É–Ω–¥–æ–º –∏–∑ 3 –ø–æ–ø—ã—Ç–æ–∫
        if (repeatCount == 0) {
            Toast.makeText(this, "–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: $currentLength", Toast.LENGTH_SHORT).show()
        }

        sequenceText.text = "–ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ..."
        showSequence()
    }

    private fun onUserClick(selectedEmoji: String) {
        userInput.add(selectedEmoji)
        val currentIndex = userInput.lastIndex

        if (currentIndex >= sequence.size || userInput[currentIndex] != sequence[currentIndex]) {
            Toast.makeText(this, "–ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", Toast.LENGTH_SHORT).show()
            repeatCount = 0 // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–æ–π –¥–ª–∏–Ω–µ
            handler.postDelayed({ startNewRound() }, 1000)
            return
        }

        if (userInput.size == sequence.size) {
            Toast.makeText(this, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", Toast.LENGTH_SHORT).show()
            isInputEnabled = false
            repeatCount++

            if (repeatCount == 3) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–ª–∏–Ω–µ
                currentLength++
                repeatCount = 0

                if (currentLength > maxLength) {
                    // –ü–æ–±–µ–¥–∞!
                    Toast.makeText(this, "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–≤–Ω–∏!", Toast.LENGTH_LONG).show()
                    handler.postDelayed({
                        currentLength = 1
                        repeatCount = 0
                        startNewRound()
                    }, 2000)
                    return
                }
            }

            handler.postDelayed({ startNewRound() }, 1000)
        }
    }

    private fun showSequence() {
        val colors = listOf(Color.BLACK, Color.BLUE)
        var delay = 0L

        for ((index, emoji) in sequence.withIndex()) {
            handler.postDelayed({
                sequenceText.setTextColor(colors[index % colors.size])
                sequenceText.text = "${index + 1}: $emoji" // üëà –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä
            }, delay)
            delay += 1200L
        }

        handler.postDelayed({
            sequenceText.setTextColor(Color.DKGRAY)
            sequenceText.text = "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!"
            isInputEnabled = true
        }, delay)
    }

}
